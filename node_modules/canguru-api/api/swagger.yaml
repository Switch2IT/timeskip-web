---
swagger: "2.0"
info:
  version: "v0.2-SNAPSHOT"
  title: "Timeskip API"
basePath: "/timeskip-web/api"
tags:
- name: "projects"
- name: "users"
- name: "organizations"
paths:
  /organizations:
    get:
      tags:
      - "organizations"
      summary: "List organizations"
      description: "Return a list of organizations"
      operationId: "listOrganizations"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Organization list"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/OrganizationDTO"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Organizations"
    post:
      tags:
      - "organizations"
      summary: "Create organization"
      description: "Create an organization. A name must be provided"
      operationId: "createOrganization"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/OrganizationDTO"
      responses:
        200:
          description: "Organization"
          schema:
            $ref: "#/definitions/OrganizationDTO"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Organizations"
    put:
      tags:
      - "organizations"
      summary: "Update organization"
      description: "Update an organization. ID must be provided in the request body"
      operationId: "updateOrganization"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/OrganizationDTO"
      responses:
        200:
          description: "Updated"
          schema:
            $ref: "#/definitions/OrganizationDTO"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Organizations"
  /organizations/{organizationId}:
    get:
      tags:
      - "organizations"
      summary: "Get organization"
      description: "Get an organization for a given ID"
      operationId: "getOrganization"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Organization"
          schema:
            $ref: "#/definitions/OrganizationDTO"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Organizations"
    delete:
      tags:
      - "organizations"
      summary: "Delete organization"
      description: "Delete an organization."
      operationId: "deleteOrganization"
      parameters:
      - name: "organizationId"
        in: "path"
        required: true
        type: "string"
      responses:
        204:
          description: "Succesful, no content"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Organizations"
    patch:
      tags:
      - "organizations"
      summary: "Patch organization"
      description: "Patch an organization."
      operationId: "patchOrganization"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "organizationId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/OrganizationDTO"
      responses:
        200:
          description: "Updated"
          schema:
            $ref: "#/definitions/OrganizationDTO"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Organizations"
  /projects:
    get:
      tags:
      - "projects"
      summary: "List projects"
      description: "Return a list of projects"
      operationId: "listProjects"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Projects list"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ProjectDTO"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Projects"
    post:
      tags:
      - "projects"
      summary: "Create project"
      description: "Create a project. A name must be provided"
      operationId: "createProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ProjectDTO"
      responses:
        200:
          description: "Project"
          schema:
            $ref: "#/definitions/ProjectDTO"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Projects"
    put:
      tags:
      - "projects"
      summary: "Update project"
      description: "Update a project. ID must be provided in the request body"
      operationId: "updateProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ProjectDTO"
      responses:
        200:
          description: "Updated"
          schema:
            $ref: "#/definitions/ProjectDTO"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Projects"
  /projects/{projectId}:
    get:
      tags:
      - "projects"
      summary: "Get project"
      description: "Get a project for a given ID"
      operationId: "getProject"
      produces:
      - "application/json"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Project"
          schema:
            $ref: "#/definitions/ProjectDTO"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Projects"
    delete:
      tags:
      - "projects"
      summary: "Delete project"
      description: "Delete a project."
      operationId: "deleteProject"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "string"
      responses:
        204:
          description: "Succesful, no content"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Projects"
    patch:
      tags:
      - "projects"
      summary: "Patch project"
      description: "Patch a project."
      operationId: "patchProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ProjectDTO"
      responses:
        200:
          description: "Updated"
          schema:
            $ref: "#/definitions/ProjectDTO"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Projects"
  /projects/{projectId}/activities:
    get:
      tags:
      - "projects"
      summary: "List project activities"
      description: "Return a list of activities for project"
      operationId: "listProjectActivities"
      produces:
      - "application/json"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Activity list"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ActivityDTO"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Projects"
    post:
      tags:
      - "projects"
      summary: "Create activity"
      description: "Create an activity. A description must be provided"
      operationId: "createActivity"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ActivityDTO"
      responses:
        200:
          description: "Project"
          schema:
            $ref: "#/definitions/ActivityDTO"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Projects"
    put:
      tags:
      - "projects"
      summary: "Update activity"
      description: "Update an activity. ID must be provided in the request body"
      operationId: "updateActivity"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ActivityDTO"
      responses:
        200:
          description: "Updated"
          schema:
            $ref: "#/definitions/ActivityDTO"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Projects"
  /projects/{projectId}/activities/{activityId}:
    get:
      tags:
      - "projects"
      summary: "Get activity"
      description: "Get an activity for a given ID"
      operationId: "getActivity"
      produces:
      - "application/json"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "string"
      - name: "activityId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Activity"
          schema:
            $ref: "#/definitions/ActivityDTO"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Projects"
    delete:
      tags:
      - "projects"
      summary: "Delete activity"
      description: "Delete an activity."
      operationId: "deleteActivity"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "string"
      - name: "activityId"
        in: "path"
        required: true
        type: "string"
      responses:
        204:
          description: "Succesful, no content"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Projects"
    patch:
      tags:
      - "projects"
      summary: "Patch activity"
      description: "Patch an activity."
      operationId: "patchActivity"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "string"
      - name: "activityId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ActivityDTO"
      responses:
        200:
          description: "Updated"
          schema:
            $ref: "#/definitions/ActivityDTO"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Projects"
  /users:
    get:
      tags:
      - "users"
      summary: "List users"
      description: "Retrieve a list of all users."
      operationId: "listUsers"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "User list"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserDTO"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Users"
    post:
      tags:
      - "users"
      summary: "Create a user"
      description: "Create a user"
      operationId: "createUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UserBean"
      responses:
        202:
          description: "Created"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Users"
  /users/current:
    get:
      tags:
      - "users"
      summary: "Get current user"
      description: "Get the current user"
      operationId: "getCurrentUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "User info"
          schema:
            $ref: "#/definitions/UserDTO"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Users"
  /users/jwt/parse:
    post:
      tags:
      - "users"
      summary: "Parse a JWT"
      description: "Parse a JWT and return the user info from the claims"
      operationId: "parseJwt"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "JWT"
        required: false
        schema:
          $ref: "#/definitions/JWTParseRequest"
      responses:
        200:
          description: "User info"
          schema:
            $ref: "#/definitions/TokenClaimsResponse"
        400:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "Users"
definitions:
  ProjectDTO:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      organizations:
        type: "array"
        items:
          $ref: "#/definitions/OrganizationDTO"
  TokenClaimsResponse:
    type: "object"
    properties:
      userInfo:
        type: "object"
        additionalProperties:
          type: "object"
          properties: {}
  UserBean:
    type: "object"
    properties:
      id:
        type: "string"
      fullName:
        type: "string"
      email:
        type: "string"
      admin:
        type: "boolean"
        default: false
  JWTParseRequest:
    type: "object"
    properties:
      jwt:
        type: "string"
  UserDTO:
    type: "object"
    properties:
      id:
        type: "string"
      email:
        type: "string"
      fullName:
        type: "string"
      admin:
        type: "boolean"
        default: false
  ActivityDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
      projectId:
        type: "string"
  OrganizationDTO:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
  ErrorResponse:
    type: "object"
    properties:
      message:
        type: "string"
      errorCode:
        type: "integer"
        format: "int32"
      httpCode:
        type: "integer"
        format: "int32"
      type:
        type: "string"
